{"version":3,"sources":["styles.scss","../../node_modules/ed-grid/components/_base.scss","../../node_modules/ed-grid/components/_core.scss","../../node_modules/ed-grid/components/_functions.scss","../../node_modules/ed-grid/components/_buttons.scss","../../node_modules/ed-grid/components/_helpers.scss","../../node_modules/ed-grid/components/_flexbox.scss","../../node_modules/ed-grid/components/_visibility.scss","../../node_modules/ed-grid/components/_media-queries.scss","../../node_modules/ed-grid/components/_css-helpers.scss","../../node_modules/ed-grid/components/_video.scss","base/base.scss","layout/_layout.scss","components/_logo.scss","components/_lists.scss","components/_code.scss","theme/_typography.scss","config/_variables.scss","config/_mixins.scss","config/_functions.scss","hacks/_hacks.scss"],"names":[],"mappings":"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","file":"styles.css","sourcesContent":["/*\n  This boilerplate is based in ITCSS and SMACSS\n*/\n\n// Google Fonts\n@import \"https://fonts.googleapis.com/css?family=Lato:400,400i|Open+Sans:700\";\n\n// Config\n@import \"config/functions\";\n@import \"config/variables\";\n@import \"config/mixins\";\n\n// Libraries\n@import \"ed-grid/ed-grid\";\n\n// Base and elements (generic)\n@import \"base/base\";\n\n// LAYOUT\n  // Escribe solo los estilos de layout (division en regiones del viewport)\n@import \"layout/layout\";\n\n// MODULOS (SMACSS) O COMPONENTES (ITCSS)\n  // Son los elementos de UI de tu interfaz, como botones, tablas, menus, etc.\n  // Crea los archivos adicionales que necesites (uno por componente)\n@import \"components/buttons\";\n@import \"components/menus\";\n@import \"components/logo\";\n@import \"components/lists\";\n@import \"components/code\";\n\n// Theme (colors and fonts)\n@import \"theme/typography\";\n\n// Utilities (hacks)\n  // Todos los hacks que hayas necesitado para solucionar conflictos\n  // o resolver situaciones extremas. Se espera poder mejorarlos luego.\n@import \"hacks/hacks\";\n\n","// RWD Bases\r\n*,\r\n*:before,\r\n*:after {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  margin      : 0;\r\n  font-family : sans-serif;\r\n}\r\n\r\n// Imágenes responsive\r\nimg {\r\n  max-width : 100%;\r\n  height    : auto;\r\n}\r\n\r\na {\r\n  text-decoration : none;\r\n\r\n  &:hover { text-decoration : underline }\r\n}\r\n","// placeholder para ed-container\r\n%ed-container {\r\n  display      : flex;\r\n  flex-wrap    : wrap;\r\n  max-width    : $max-width;\r\n  margin-left  : auto;\r\n  margin-right : auto;\r\n  width        : 100%;\r\n}\r\n\r\n// placeholder para ed-item\r\n%ed-item {\r\n  margin        : 0;\r\n  padding-left  : $gutter;\r\n  padding-right : $gutter;\r\n}\r\n\r\n/// mixin para crear un ed-container\r\n/// Description hace que el elemento sea un contenedor, esto dota al elemento para que tambien sea un flex-container.\r\n/// @group layouts\r\n/// @author  Alvaro Felipe\r\n/// @example scss\r\n/// .container {\r\n///   @include edContainer;\r\n///}\r\n@mixin edContainer {\r\n  @extend %ed-container;\r\n\r\n  @if $devMode == true {\r\n    @include devModeContainer();\r\n  }\r\n}\r\n\r\n/// Hace que un elemento siempre mida el 100% del ancho disponible\r\n/// @group layouts\r\n/// @author Alvaro Felipe\r\n/// @example scss\r\n/// .full {\r\n///   @include full;\r\n/// }\r\n@mixin full {\r\n  max-width : 100%;\r\n}\r\n\r\n@mixin edItemWidth($currentBp, $prevBp, $coreBp){\r\n  // Si el tamaño actual es diferente al previo\r\n  // asignará el ancho en porcentaje\r\n  @if $currentBp != $prevBp{\r\n    @if $currentBp < 1 {\r\n      @include from($coreBp){\r\n        width : $currentBp * 100%;\r\n      }\r\n    }\r\n    @else {\r\n      @include from($coreBp){\r\n        width : $currentBp * 1%;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/// mixin para crear un ed-item\r\n/// Description\r\n/// Los argumentos que acepta son las diferentes medidas que tendra el elemento en diferentes resoluciones de pantalla.\r\n/// Las medidas pueden especificarse como porcentajes ( %  ) o como fracciones (1/3, 3/3 o 3/6, 2/6).\r\n/// @group layouts\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $s - para resoluciones entre 0px y 640px\r\n/// @param   {number} $m - para resoluciones entre 640px y 1024px\r\n/// @param   {number} $l - para resoluciones entre 1024px y 1440px\r\n/// @param   {number} $xl - para resoluciones desde 1440px en adelante.\r\n/// @example scss\r\n///   .container {\r\n///     @include edContainer;\r\n///   }\r\n///\r\n///   .content {\r\n///     @include edItem(100, 75, 60);\r\n///   }\r\n///   .sidebar {\r\n///     @include edItem(100, 25, 40);\r\n///   }\r\n@mixin edItem($s:100,$m:$s,$l:$m,$xl:$l) {\r\n  @extend %ed-item;\r\n\r\n  @if $devMode == true {\r\n    @include devModeItem();\r\n  }\r\n\r\n  // calcular el ancho para el primer breakpoint\r\n  // por defecto es 100% y se convertirá al porcentaje adecuado\r\n  // según el valor que se le pase\r\n  @if $s == 100 {\r\n    width: 100%;\r\n  } @else if $s < 1 {\r\n    width : $s * 100%;\r\n  } @else {\r\n    width : $s * 1%;\r\n  }\r\n\r\n  // widths for others breakpoints\r\n  // anchos para los demás breakpoints\r\n  @include edItemWidth($m,$s,m); //medium\r\n  @include edItemWidth($l,$m,l); //large\r\n  @include edItemWidth($xl,$l,xl); //xlarge\r\n}\r\n\r\n// crear un ed-container\r\n.#{$container} { @include edContainer() }\r\n\r\n// crear un ed-item\r\n.#{$item} {\r\n  @include edItem();\r\n\r\n  // un ed-item a la vez puede ser ed-container\r\n  // para evitar anidaciones innecesarias\r\n  &.#{$container}{\r\n    padding-left : 0;\r\n    padding-right : 0;\r\n  }\r\n}\r\n\r\n// Breakpoints\r\n@mixin coreGrid(){\r\n  @each $size, $screen-size in $breakpoints{\r\n    @if $size == s {\r\n      @for $i from 1 through 20 {\r\n        .s-#{$i*5},\r\n        .#{$item}.s-#{$i*5} {\r\n          width: $i * 5%;\r\n        }\r\n      }\r\n      @each $fraction in $fractions{\r\n        @for $i from 1 through $fraction{\r\n          .s-#{$i}-#{$fraction},\r\n          .#{$item}.s-#{$i}-#{$fraction} {\r\n            width: (100% / $fraction) * $i;\r\n          }\r\n        }\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        @for $i from 1 through 20 {\r\n          .#{$size}-#{$i*5},\r\n          .#{$item}.#{$size}-#{$i*5}{\r\n            width: $i * 5%;\r\n          }\r\n        }\r\n        @each $fraction in $fractions {\r\n          @for $i from 1 through $fraction{\r\n            .#{$size}-#{$i}-#{$fraction},\r\n            .#{$item}.#{$size}-#{$i}-#{$fraction} {\r\n              width: (100% / $fraction) * $i\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/// Transforma un valor en pixeles a em.\r\n/// @group   functions\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $el - el valor en pixeles que se desea convertir.\r\n/// @param   {number} $context - el valor en pixeles del contenedor.\r\n/// @return  {number} el tamaño transformado en em.\r\n@function em($el,$context:16px) {\r\n  @if type_of($el) == number and unit($el) == 'px' {\r\n    @return ($el / $context) * 1em;\r\n  } @else {\r\n    @error 'Function em() requires a px unit as first argument / La función em() requiere una unidad de pixeles como primer argumento (el segundo es opcional)'\r\n  }\r\n}\r\n\r\n/// Transforma un valor en pixeles a rem.\r\n/// @group   functions\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $el - el valor en pixeles que se desea convertir.\r\n/// @return  {number} el tamaño transformado en rem.\r\n@function rem($el) {\r\n  @if type_of($el) == number and unit($el) == 'px' {\r\n    @return ($el / 16px) * 1rem;\r\n  } @else {\r\n    @error 'Function rem() requires a px unit as argument / La funcion rem() requiere una unidad de pixeles como argumento';\r\n  }\r\n}\r\n","%button {\r\n  display       : inline-block;\r\n  line-height   : 2.5em;\r\n  padding       : 0 1.5em;\r\n  cursor        : pointer;\r\n  margin-bottom : 1em;\r\n  border        : none;\r\n}\r\n\r\n@mixin button($bg-color: #ddd,$front-color: #333,$style: default) {\r\n  @extend    %button;\r\n  background : $bg-color;\r\n  color      : $front-color;\r\n\r\n  &:hover {\r\n    background      : darken($bg-color, 5);\r\n    text-decoration : none;\r\n  }\r\n\r\n  &:active {\r\n    transform : scale(.97);\r\n  }\r\n\r\n  // estilos del boton (radius o round)\r\n  @if $style == radius {\r\n    border-radius : .25em;\r\n  } @else if $style == round {\r\n    border-radius : 1.25em;\r\n  }\r\n}\r\n","/// Añade padding a los lados para compenzar el gutter de EDgrid.\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $numero - La cantidad de padding (1 == 1 gutter == 15px).\r\n/// @example scss\r\n/// Si el número es 0 el padding se elimina.\r\n///   .selector1 { @include padding(3) }\r\n@mixin padding($numero:1){\r\n  padding-left  : $gutter * $numero;\r\n  padding-right : $gutter * $numero;\r\n}\r\n\r\n/// Elimina los paddings horizontales de todos los hijos directos\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n/// @example scss\r\n///   .selector2 { @include noPaddingContainer; }\r\n@mixin noPaddingContainer(){\r\n  > .#{$item} { @include padding(0) }\r\n}\r\n\r\n/// Hace que un elemento tenga la proporcion de aspecto especificada.\r\n/// Las propiedades de alinecion con flexbox, no funcionaran en este elemento\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n@mixin ratio($h,$v) {\r\n  $width         : 100%;\r\n  width          : $width;\r\n  height         : 0;\r\n  overflow       : hidden;\r\n  padding-bottom : $width * ($v/$h);\r\n}\r\n\r\n/// Limpia los floats.\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n/// @example [scss | sass] - Usage\r\n///   .clearfix {\r\n///     @include clearfix;\r\n///   }\r\n@mixin clearfix {\r\n  &:before,\r\n  &:after {\r\n    content : \"\";\r\n    width   : 100%;\r\n    display : table;\r\n    clear   : both;\r\n  }\r\n}\r\n/// Alinea el elemento a la derecha\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $width - Ancho del elemento (con su unidad)\r\n/// @param   {number} $margin-left - cantidad de margen derecho (opcional)\r\n/// @example scss\r\n///   .fb-icon {\r\n///     @include toRight(20%, 1em);\r\n///   }\r\n@mixin toRight($width:auto,$margin-left:1em){\r\n  float       : right;\r\n  width       : $width;\r\n  margin-left : $margin-left;\r\n}\r\n\r\n/// Alinea el elemento a la izquierda\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $width - Ancho del elemento (con su unidad)\r\n/// @param   {number} $margin-right - cantidad de margen izquierdo (opcional)\r\n/// @example scss\r\n///   .fb-icon {\r\n///     @include toLeft(20%, 1em);\r\n///   }\r\n@mixin toLeft($width:auto,$margin-right:1em){\r\n  float        : left;\r\n  width        : $width;\r\n  margin-right : $margin-right;\r\n}\r\n\r\n/// Centra un elemento\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $width - Ancho del elemento (con su unidad)\r\n/// @example scss\r\n///   .fb-icon {\r\n///     @include toCenter(20%);\r\n///   }\r\n@mixin toCenter($width:auto){\r\n  display      : block;\r\n  width        : $width;\r\n  margin-left  : auto;\r\n  margin-right : auto;\r\n  text-align   : center;\r\n}\r\n/// Hace al elemento circular.\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n/// @example scss\r\n///   .item::before {\r\n///     content: \"\";\r\n///     width: 150px;\r\n///     height: 150px;\r\n///     display: block;\r\n///     @include circle;\r\n///   }\r\n@mixin circle { border-radius : 50% }\r\n\r\n/// Hace que el elemento ocupe el 100% de su contenedor.\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n/// @example \r\n///   .header {\r\n///     @include full;\r\n///   }\r\n@mixin full(){\r\n  width     : 100%;\r\n  max-width : 100%;\r\n  clear     : both;\r\n}\r\n/// Hace que un elemento se quede pegado en la parte inferior de la pagina indistintamente del tamaño del contenido del sitio.\r\n/// @group   helpers\r\n/// @author  Alvaro Felipe\r\n/// @example scss\r\n///    .main-footer {\r\n///      width: 100%;\r\n///      display: block;\r\n///      height: 150px;\r\n///      @include stickyFooter;\r\n///    }\r\n@mixin stickyFooter {\r\n  @at-root {\r\n    body {\r\n      display        : flex;\r\n      flex-direction : column;\r\n      min-height     : 100vh;\r\n    }\r\n  }\r\n\r\n  margin-top : auto;\r\n}\r\n\r\n@mixin cssStyckyFooter {\r\n  display        : flex;\r\n  flex-direction : column;\r\n  min-height     : 100vh;\r\n\r\n  > footer { margin-top : auto }\r\n}\r\n\r\n// Versiones CSS\r\n@mixin helpers {\r\n  .to-center                {\r\n    display : block;\r\n    margin-right : auto;\r\n    margin-left : auto;\r\n  }\r\n  .to-left                  { @include toLeft()             }\r\n  .to-right                 { @include toRight()            }\r\n  .full                     { @include full()               }\r\n  .circle                   { @include circle()             }\r\n  .clearfix                 { @include clearfix()           }\r\n  .no-padding.#{$container} { @include noPaddingContainer() }\r\n  .no-padding.#{$item}      { @include padding(0)           }\r\n  .padding                  { @include padding(1)           }\r\n  .padding-2                { @include padding(2)           }\r\n  .padding-3                { @include padding(3)           }\r\n  body.sticky-footer        { @include cssStyckyFooter()    }\r\n}\r\n\r\n","@mixin flexOrder {\r\n  // Solo existe para css, es innecesario en Sass (una sola línea)\r\n  @each $size, $screen-size in $breakpoints{\r\n    @if $size == s {\r\n      @for $i from 1 through 10 {\r\n        .#{$size}-order-#{$i} {\r\n          order: $i;\r\n        }\r\n      }\r\n    } @else {\r\n      @media screen and (min-width: $screen-size){\r\n        @for $i from 1 through 10 {\r\n          .#{$size}-order-#{$i} {\r\n            order: $i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Alineacion en el main axis\r\n// Aplican al flex-container\r\n@mixin flex {\r\n  display   : flex;\r\n  flex-wrap : wrap;\r\n}\r\n\r\n@mixin mainJustify {\r\n  @include flex;\r\n  justify-content : space-between;\r\n}\r\n\r\n@mixin cssMainJustify {\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-justify {\r\n        @include flex;\r\n        justify-content : space-between;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-justify {\r\n          @include flex;\r\n          justify-content : space-between;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin mainDistribute {\r\n  @include flex;\r\n  justify-content : space-around;\r\n}\r\n\r\n@mixin cssMainDistribute {\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-distribute {\r\n        @include flex;\r\n        justify-content : space-around;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-distribute {\r\n          @include flex;\r\n          justify-content : space-around;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin mainCenter {\r\n  @include flex;\r\n  justify-content : center;\r\n}\r\n\r\n@mixin cssMainCenter {\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-main-center {\r\n        @include flex;\r\n        justify-content : center;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-main-center {\r\n          @include flex;\r\n          justify-content : center;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin mainStart{\r\n  @include flex;\r\n  justify-content : flex-start;\r\n}\r\n\r\n@mixin cssMainStart{\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-main-start {\r\n        @include flex;\r\n        justify-content : flex-start;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-main-start {\r\n          @include flex;\r\n          justify-content : flex-start;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin mainEnd{\r\n  @include flex;\r\n  justify-content : flex-end;\r\n}\r\n\r\n@mixin cssMainEnd{\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-main-end {\r\n        @include flex;\r\n        justify-content : flex-end;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-main-end {\r\n          @include flex;\r\n          justify-content : flex-end;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Al inicio en el cross axis para CSSCore\r\n@mixin crossStart{\r\n  @include flex;\r\n  align-items   : flex-start;\r\n  align-content : flex-start;\r\n}\r\n\r\n@mixin cssCrossStart{\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-cross-start {\r\n        @include flex;\r\n        align-items   : flex-start;\r\n        align-content : flex-start;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-cross-start {\r\n          @include flex;\r\n          align-items   : flex-start;\r\n          align-content : flex-start;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Al centro en el cross axis para CSSCore\r\n@mixin crossCenter {\r\n  @include flex;\r\n  align-items   : center;\r\n  align-content : center;\r\n}\r\n\r\n@mixin cssCrossCenter {\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == 0 {\r\n      .#{$size}-cross-center {\r\n        @include flex;\r\n        align-items   : center;\r\n        align-content : center;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-cross-center {\r\n          @include flex;\r\n          align-items   : center;\r\n          align-content : center;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Al final en el cross axis para CSSCore\r\n@mixin crossEnd {\r\n  @include flex;\r\n  align-items   : flex-end;\r\n  align-content : flex-end;\r\n}\r\n\r\n@mixin cssCrossEnd {\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-cross-end {\r\n        @include flex;\r\n        align-items   : flex-end;\r\n        align-content : flex-end;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-cross-end {\r\n          @include flex;\r\n          align-items   : flex-end;\r\n          align-content : flex-end;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Orientación del container\r\n@mixin flexReverse {\r\n  @include flex;\r\n  flex-direction : row-reverse;\r\n}\r\n\r\n@mixin cssFlexReverse{\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-reverse {\r\n        @include flex;\r\n        flex-direction : row-reverse;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-reverse {\r\n          @include flex;\r\n          flex-direction : row-reverse;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin flexColumn {\r\n  @include flex;\r\n  flex-direction : column;\r\n}\r\n\r\n@mixin cssFlexColumn {\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-column {\r\n        @include flex;\r\n        flex-direction : column;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-column {\r\n          @include flex;\r\n          flex-direction : column;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin flexColumnReverse {\r\n  @include flex;\r\n  flex-direction : column-reverse;\r\n}\r\n\r\n@mixin cssFlexColumnReverse {\r\n  @each $size, $screen-size in $breakpoints {\r\n    @if $size == s {\r\n      .#{$size}-column-reverse {\r\n        @include flex;\r\n        flex-direction : column-reverse;\r\n      }\r\n    } @else {\r\n      @media all and (min-width: $screen-size){\r\n        .#{$size}-column-reverse {\r\n          @include flex;\r\n          flex-direction : column-reverse;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Centrado absoluto (vertical y horizontal)\r\n@mixin flexCenter($child: null) {\r\n  display         : flex;\r\n  justify-content : center;\r\n  align-items     : center;\r\n  text-align      : center;\r\n\r\n  @if $child != null {\r\n    #{$child}{\r\n      margin : auto;\r\n    }\r\n  }\r\n}\r\n\r\n// Versiones CSS Helpers\r\n// si se omite el breakpoint se aplica siempre\r\n@mixin flexCssHelpers {\r\n  .main-justify        { @include mainJustify       }\r\n  .main-distribute     { @include mainDistribute    }\r\n  .main-center         { @include mainCenter        }\r\n  .main-start          { @include mainStart         }\r\n  .main-end            { @include mainEnd           }\r\n  .cross-start         { @include crossStart        }\r\n  .cross-center        { @include crossCenter       }\r\n  .cross-end           { @include crossEnd          }\r\n  .flex-reverse        {  @include flexReverse      }\r\n  .flex-column         { @include flexColumn        }\r\n  .flex-column-reverse { @include flexColumnReverse }\r\n  .abcenter            { @include flexCenter        }\r\n}\r\n","/// Muestra un elemento a partir del breakpoint especificado\r\n/// @group   visibility\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $bp - breakpoint a partir del cual mostrar el elemento\r\n/// @example scss\r\n///   .sidebar {\r\n///     @include showFrom(l);\r\n///   }\r\n@mixin showFrom($bp){\r\n  @include to($bp){\r\n    display : none;\r\n  }\r\n}\r\n\r\n/// Muestra un elemento por debajo del breakpoint especificado.\r\n/// @group   visibility\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $bp - breakpoint.\r\n/// @example scss\r\n///   .sidebar {\r\n///     @include showFrom(l);\r\n///   }\r\n@mixin showTo($bp){\r\n  @include from($bp){\r\n    display : none;\r\n  }\r\n}\r\n\r\n/// Oculta un elemento a partir del breakpoint especificado\r\n/// @group   visibility\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $bp - breakpoint a partir del cual ocultar el elemento\r\n/// @example scss\r\n///   .sidebar {\r\n///     @include hideFrom(l);\r\n///   }\r\n@mixin hideFrom($bp){\r\n  @include from($bp){\r\n    display : none;\r\n  }\r\n}\r\n\r\n/// Oculta un elemento por debajo del breakpoint especificado.\r\n/// @group   visibility\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $bp - breakpoint\r\n/// @example scss\r\n///   .sidebar {\r\n///     @include hideFrom(l);\r\n///   }\r\n@mixin hideTo($bp){\r\n  @include to($bp){\r\n    display : none;\r\n  }\r\n}\r\n\r\n// Version css\r\n@mixin visibility {\r\n  @each $size, $screenSize in $breakpoints {\r\n    .from-#{$size} { @include showFrom($size) }\r\n    .to-#{$size} { @include showTo($size) }\r\n  }\r\n}\r\n","/// Devuelve true si el breakpoint es parte del core\r\n/// @group mq\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $bp - breakpoint\r\n/// @example scss\r\n///    .elemento {\r\n///      @if isCoreBreakpoint(l) {\r\n///        $customBp : 720px;\r\n///        ....\r\n///      }\r\n///    }\r\n@function isCoreBreakpoint($bp){\r\n  @if map-get($breakpoints,$bp) {\r\n    @return true\r\n  } @else {\r\n    @return false\r\n  }\r\n}\r\n\r\n/// Devuelve true si el breakpint es válido (em, rem, px)\r\n/// @group   mq\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $bp - breakpoint a verificar.\r\n@function isValidBreakpoint($bp){\r\n  @if type-of($bp) == number and (unit($bp) == 'px' or unit($bp) == 'em' or unit($bp) == 'rem') {\r\n    @return true\r\n  } @else {\r\n    @return false\r\n  }\r\n}\r\n\r\n/// Obtiene un breakpoint del core\r\n/// @group   mq\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $bp - breakpoint a obtener.\r\n@function getBp($bp){\r\n  @return map-get($breakpoints,$bp)\r\n}\r\n\r\n/// Convierte un valor en em o rem a px\r\n/// @group   mq\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $value - var a convertir a pixeles.\r\n@function toPx($value){\r\n  @if type-of($value) == number {\r\n    @if unit($value) == 'em'{\r\n      @return ($value / 1em) * 16px;\r\n    } @else if unit($value) == 'rem'{\r\n      @return ($value / 1rem) * 16px\r\n    } @else if unit($value) == 'px' {\r\n      @return $value;\r\n    } @else {\r\n      @error \"La funcion toPx() solo acepta numeros en em o rem o px\"\r\n    }\r\n  } @else {\r\n    @error \"La funcion toPx() solo acepta numeros en em o rem\"\r\n  }\r\n}\r\n\r\n/// From (mayor que $bp)\r\n/// @group   mq\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $from - breakpoint\r\n/// @example scss\r\n///     .elemento {\r\n///       width: 30%;\r\n///       @include from(m) {\r\n///         width: 50%;\r\n///       }\r\n///     }\r\n@mixin from($from){\r\n  // Si el bp es del core de EDgrid\r\n  @if isCoreBreakpoint($from){\r\n    // no imprime media query para tamaño s\r\n    @if $from == s {\r\n      @content\r\n    }\r\n    // imprime media query en los otros tamaños\r\n    @else {\r\n      @media screen and (min-width: getBp($from)){ @content }\r\n    }\r\n  }\r\n  // Si el bp no es del core de EDgrid pero es una unidad válida\r\n  @else if isValidBreakpoint($from){\r\n    @media screen and (min-width: $from){ @content }\r\n  }\r\n  // Error\r\n  @else {\r\n    @error 'El mixin from() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem'\r\n  }\r\n}\r\n\r\n/// To (es menor que $to)\r\n/// @group   mq\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $to - breakpoint\r\n/// @example scss\r\n///     .elemento {\r\n///       width: 50%;\r\n///       @include to(m) {\r\n///         width: 30%;\r\n///       }\r\n///     }\r\n@mixin to($to){\r\n  // Si es un breakpoint del core\r\n  @if isCoreBreakpoint($to){\r\n    @if $to == s {\r\n      @content;\r\n    } @else {\r\n      @media screen and (max-width : getBp($to) - 1px) { @content }\r\n    }\r\n  }\r\n  // Si es un breakpoint válido (px, em, rem)\r\n  @else if isValidBreakpoint($to){\r\n    @media screen and (max-width: toPx($to) - 1px){ @content }\r\n  }\r\n  // Si no es un breakpoint válido lanzar error\r\n  @else {\r\n    @error 'El mixin to() solo puede recibir un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem'\r\n  }\r\n}\r\n\r\n/// fromTo la regla se ejecuta entre ambos breakpoints.\r\n/// @group   mq\r\n/// @author  Alvaro Felipe\r\n/// @param   {number} $from - breakpoint desde que medida se iniciara la regla.\r\n/// @param   {number} $to - breakpoint hasta que medida se ejecutara la regla.\r\n/// @example scss\r\n///     .elemento {\r\n///       background-color: cyan;\r\n///       @include fromTo(s, l) {\r\n///         background-color: darken(cyan, .8);\r\n///       }\r\n///     }\r\n@mixin fromTo($from,$to){\r\n  // Si ambos son breakpoints del core\r\n  @if isCoreBreakpoint($from) and isCoreBreakpoint($to){\r\n    @if getBp($to) > getBp($from) {\r\n      @media screen and (min-width : getBp($from)) and (max-width : getBp($to) - 1px) {\r\n        @content\r\n      }\r\n    } @else {\r\n      @error \"El segundo argumento del mixin fromTo debe ser mayor que el primero\"\r\n    }\r\n  }\r\n\r\n  // Si solo $from es breakpoint del core\r\n  @else if isCoreBreakpoint($from) and not isCoreBreakpoint($to){\r\n    @if isValidBreakpoint($to) {\r\n      @if toPx($to) > toPx(getBp($from)) {\r\n        @media screen and (min-width : getBp($from)) and (max-width : toPx($to) - 1px) {\r\n          @content\r\n        }\r\n      } @else {\r\n        @error \"El segundo argumento del mixin fromTo debe ser mayor que el primero\"\r\n      }\r\n    } @else {\r\n      @error \"El segundo argumento del mixin fromTo() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem\"\r\n    }\r\n  }\r\n\r\n  // Si solo $to es breakpoint del core\r\n  @else if not isCoreBreakpoint($from) and isCoreBreakpoint($to) {\r\n    @if isValidBreakpoint($from) {\r\n      @if toPx(getBp($to)) > toPx($from){\r\n        @media screen and (min-width : $from) and (max-width : getBp($to) - 1px) {\r\n          @content\r\n        }\r\n      } @else {\r\n        @error \"El segundo argumento del mixin fromTo debe ser mayor que el primero\"\r\n      }\r\n    }\r\n    @else {\r\n      @error \"El primer argumento del mixin fromTo() debe ser un breakpoint del Core (#{map-keys($breakpoints)}) o un número en px, em o rem\"\r\n    }\r\n  }\r\n\r\n  // Si no son breakpoints del core pero son breakpoints válidos (px, em, rem)\r\n  @else if isValidBreakpoint($from) and isValidBreakpoint($to){\r\n    @if toPx($to) > toPx($from) {\r\n      @media screen and (min-width : $from) and (max-width : toPx($to) - 1px) {\r\n        @content\r\n      }\r\n    } @else {\r\n      @error \"El segundo argumento del mixin fromTo debe ser mayor que el primero\"\r\n    }\r\n  }\r\n\r\n  // Si al menos hay un breakpoint inválido\r\n  @else {\r\n    @error 'Los argumentos del mixin fromTo() deben ser breakpoints del Core (#{map-keys($breakpoints)}) o números en px, em o rem';\r\n  }\r\n}\r\n","@if $cssHelpers == true {\r\n  @include coreGrid();\r\n  @include helpers();\r\n  @include flexCssHelpers();\r\n  @include visibility();\r\n\r\n  .ed-video { @include edVideo() }\r\n  .button   { @include button()  }\r\n}\r\n","/// Videos responsive\r\n/// Este mixing se debe aplicar al contenedor del video.\r\n/// @group   video\r\n/// @author  Alvaro Felipe\r\n/// @param   {selector} $video - selector del elemento video\r\n/// @example scss\r\n///     #ed-cursos {\r\n///       @include edVideo(\"video\");\r\n///     }\r\n\r\n@mixin edVideo ($video: null) {\r\n  height         : 0;\r\n  overflow       : hidden;\r\n  padding-bottom : 56.25%;\r\n  position       : relative;\r\n\r\n  @if $video != null {\r\n    #{$video} {\r\n      position : absolute;\r\n      top      : 0;\r\n      left     : 0;\r\n      width    : 100%;\r\n      height   : 100%;\r\n    }\r\n  } @else {\r\n    > iframe,\r\n    > video,\r\n    > .video {\r\n      position : absolute;\r\n      top      : 0;\r\n      left     : 0;\r\n      width    : 100%;\r\n      height   : 100%;\r\n    }\r\n  }\r\n}\r\n","*,\n*::before,\n*:after {\n  box-sizing: border-box;\n}\n\nbody {\n  margin : 0;\n}\n",".main-header {\n  height : 64px;\n  border-bottom : 1px solid #ccc;\n  display : flex;\n  align-items: center;\n}\n\n.header-links a {\n  display : inline-block;\n  margin-left : 1em;\n}\n\n.main-page,\n.main-footer {\n  margin-top : 3em;\n}\n\nsection {\n  margin-bottom : 2.5em;\n}\n\n.main-footer {\n  background : $darkColor;\n  color: #fff;\n  padding : 1em 0;\n}\n",".logo {\n  height : 50px;\n  width : auto;\n}\n",".data-list {\n  list-style: none;\n  margin : 0;\n  padding : 0;\n\n  li {\n    display : flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom : 1px solid $borderColor;\n    padding : .5em 0;\n\n    * {\n      //margin : 0;\n    }\n  }\n}\n",":not(pre) code {\n  color   : $thirdColor;\n  display : inline-block;\n  border  : 1px solid $borderColor;\n  padding : .1em .5em;\n  margin  : 0 .5em;\n}\n","// Aplicar tamaños de fuente\nbody {\n  font-family : $body-font;\n  font-size : fontSize(normal);\n  font-weight : 400;\n  line-height : 1.5;\n  color: rgba($darkColor,.8);\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: $header-font;\n  font-weight : 700;\n  color: rgba($darkColor,.9);\n}\n\nh1 {\n  margin-top : 0;\n  margin-bottom : 1em;\n}\n\nh2 {\n  margin-top : 1.5em;\n  margin-bottom : .75em;\n}\n\n// Set font sizes\n.bigger      { @include bigger }\nh1, .t1      { @include t1 }\nh2, .t2      { @include t2 }\nh3, .t3      { @include t3 }\nh4           { font-size: fontSize(normal) }\nh5, .small   { font-size: fontSize(small) }\nh6, .smaller { font-size: fontSize(smaller) }\n\n.small, .smaller {\n  line-height : 1.6;\n}\n","$dev: false;\n$cssCore: false;\n$cssHelpers: true;\n\n// font sizes:\n$fontSizeBase: 1.15em !default; // Lato is a small font, need 1.15em = 18.4px for legibility\n$fontSizeRatio: 1.3;\n\n// Breakpoint para tamaño movil\n$mobileBreakpoint: 1024px;\n\n// Typography\n$body-font: Lato, 'sans-serif'; // only 400 and 400i\n$header-font: 'Open Sans', 'sans-serif'; // only 700\n\n//$fontSizes: (\n//  bigger  : $fontSizeBase * pow($fontSizeRatio,4),\n//  t1      : $fontSizeBase * pow($fontSizeRatio,3),\n//  t2      : $fontSizeBase * pow($fontSizeRatio,2),\n//  t3      : $fontSizeBase * pow($fontSizeRatio,1),\n//  normal  : $fontSizeBase,\n//  small   : $fontSizeBase * 0.85,\n//  smaller : $fontSizeBase * 0.8,\n//);\n\n$fontSizes: (\n  bigger  : rem(42px),\n  t1      : rem(36px),\n  t2      : rem(30px),\n  t3      : rem(24px),\n  normal  : rem(18px),\n  small   : rem(15px),\n  smaller : rem(13px),\n);\n\n\n// Colors\n$firstColor  : #1d73c9;\n$secondColor : #25c9ff;\n$thirdColor  : #ce4139;\n$accentColor : #fba905;\n$darkColor   : #282d31;\n\n// Complementary colors:\n$borderColor: rgba($darkColor,.1);\n$textColor: rgba($darkColor,.8);\n","// typography\n\n@mixin bigger {\n  font-size: fontSize(t1);\n  font-weight : 700;\n  font-family : $header-font;\n  line-height : 1.2;\n  @include from(l) {  font-size: fontSize(bigger) }\n}\n\n@mixin t1 {\n  font-size: fontSize(t2);\n  line-height : 1.2;\n  @include from(l) { font-size: fontSize(t1) }\n}\n\n@mixin t2 {\n  font-size: fontSize(t3);\n  line-height : 1.2;\n  @include from(l) { font-size: fontSize(t2) }\n}\n\n@mixin t3 {\n  font-size: fontSize(normal);\n  line-height : 1.3;\n  @include from(l) { font-size: fontSize(t3) }\n}\n","// fontSize function\n@function fontSize($size) {\n  @if map-has-key($fontSizes, $size) {\n    @return map-get($fontSizes,$size)\n  } @else {\n    @error '$size is not valid, valid values are bigger, title1, title2, title3, normal, small, smaller'\n  }\n}\n\n// Pow function\n@function pow($number,$exponent) {\n  $result: 1;\n\n  @if type-of($exponent) == 'number' and $exponent > 0 {\n    @for $i from 1 through $exponent {\n      $result: $result * $number\n    }\n  } @else {\n    @error '$exponent must be positive number'\n  }\n\n  @return $result;\n}\n\n// Em function\n@function rem($px) {\n  @return ($px / 16px) * 1rem;\n}\n",".data-list {\n  .bigger, h1, h2, h3, h4, h5, h6 {\n    margin : 0;\n  }\n}\n"]}